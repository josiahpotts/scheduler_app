Employee Scheduling System

This program implements an employee scheduling system using a ScheduleManager class. The system allows for scheduling employees based on their availability for different time slots throughout the week (Monday to Friday). The program maintains a schedule represented as a nested dictionary, where keys are days of the week and values are dictionaries mapping time slots (in 25 unit increments) to lists of scheduled employees.

How time is represented in this program: 25 units = 15 minutes. Examples: 1300 = 1:00pm, 1325 = 1:15pm, 1350 = 1:30pm, 1375 = 1:45pm.

Class Overview

    ScheduleManager Class: Manages the scheduling of employees and maintains the current schedule.
        Attributes:
            schedule: Nested dictionary representing the schedule. The outer keys are days of the week ("Monday", "Tuesday", etc.), and the inner dictionaries map time slots (in 25 unit increments) to lists of scheduled employees.
            employee_hours: Dictionary tracking the total hours worked by each employee.
        Methods:
            schedule_employee(availability, identifier): Schedules an employee with a unique identifier based on their availability.
            display_schedule(): Displays the current schedule with scheduled employees for each time slot.

How It Works

    Initialization:
        The ScheduleManager class is initialized with an empty schedule and an empty dictionary to track employee hours.

    Scheduling Employees:
        Employees are scheduled using the schedule_employee method. This method takes an availability dictionary containing the availability of an employee for each day of the week ("Monday", "Tuesday", etc.) and a unique identifier (e.g., employee ID or name) for the scheduled individual.
        The method iterates over the days of the week and available time segments, checking if the time slot is available and if the employee has not exceeded their maximum allowed hours.
        If the conditions are met, the employee is scheduled in the respective time slot, and their total hours are updated in the employee_hours dictionary.

    Displaying Schedule:
        The display_schedule method is used to visualize the current schedule. It prints the scheduled employees for each time slot within each day of the week.

Test Cases

    Test cases are provided with randomized availability for each day of the week. These test cases simulate different scenarios where employees have varying availability throughout the week.

Randomization and Shuffling

    To introduce randomness into the scheduling process, the program shuffles the order of days when processing availability and shuffles the key/value pairs within the test cases dictionary. This ensures that the scheduling is distributed randomly across days and time slots.

Key Points Accounted For

    - Multiple available times within the same day.
    - Names for employees (in separate list that must be same index as availability).

Key Points NOT Implemented (yet)

    - Rotations (this means also no Network Security Monitoring full coverage).
    - Document parsing.
    - Visual schedule representation.
    - Data import and export. --Urgently being developed!!